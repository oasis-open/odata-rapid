"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[530],{3779:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var a=t(7462),i=t(3366),r=(t(8771),t(3905)),l=["components"],o={id:"rsdl-abnf",title:"RSDL ABNF"},s="RAPID Pro Syntax",d={unversionedId:"rsdl/rsdl-abnf",id:"rsdl/rsdl-abnf",title:"RSDL ABNF",description:"DRAFT",source:"@site/../docs/rsdl/rapid-rsdl-abnf.md",sourceDirName:"rsdl",slug:"/rsdl/rsdl-abnf",permalink:"/docs/rsdl/rsdl-abnf",draft:!1,editUrl:"https://github.com/oasis-open/odata-rapid/edit/main/docs/../docs/rsdl/rapid-rsdl-abnf.md",tags:[],version:"current",frontMatter:{id:"rsdl-abnf",title:"RSDL ABNF"},sidebar:"docs",previous:{title:"RSDL Semantics",permalink:"/docs/rsdl/rsdl-semantics"},next:{title:"RAPID and OData",permalink:"/docs/related/odata"}},p={},u=[{value:"Overview",id:"overview",level:2},{value:"Syntax rules",id:"syntax-rules",level:2},{value:"Model",id:"model",level:3},{value:"Structured Type",id:"structured-type",level:3},{value:"Enumeration Type",id:"enumeration-type",level:3},{value:"Type Definition",id:"type-definition",level:3},{value:"Service",id:"service",level:3},{value:"Annotations",id:"annotations",level:3},{value:"Core Syntax Elements",id:"core-syntax-elements",level:3}],m={toc:u};function c(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"rapid-pro-syntax"},"RAPID Pro Syntax"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"DRAFT\nMarch 2021")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This grammar uses ABNF as defined by ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc5234"},"RFC5234"),", with the addition for case-sensitive strings defined by ",(0,r.kt)("a",{parentName:"p",href:"https://tools.ietf.org/html/rfc7405"},"RFC7405")),(0,r.kt)("p",null,"Note: to increase readability of the grammar, whitespace is not reflected"),(0,r.kt)("h2",{id:"syntax-rules"},"Syntax rules"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#rapid-pro-syntax"},"RAPID Pro Syntax"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#overview"},"Overview")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#syntax-rules"},"Syntax rules"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#model"},"Model")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#structured-type"},"Structured Type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#enumeration-type"},"Enumeration Type")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#type-definition"},"Type Definition")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#service"},"Service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#annotations"},"Annotations")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#core-syntax-elements"},"Core Syntax Elements"))))))),(0,r.kt)("h3",{id:"model"},"Model"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'model                = OWS [ namespace RWS ] *include [ modelElement *( RWS modelElement ) ] OWS\n\nnamespace            = %s"namespace" RWS qualifiedName\n\ninclude              = %s"include" RWS DQUOTE 1*CHAR DQUOTE RWS %s"as" RWS identifier RWS\n\nmodelElement         = ( structuredType / enumType / typeDefinition / service )\n')),(0,r.kt)("h3",{id:"structured-type"},"Structured Type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'structuredType       = annotations [ %s"abstract" RWS ] %s"type" RWS identifier [ %s"extends" RWS qualifiedName ] OWS "{" *( OWS structuredTypeMember ) OWS "}"\n\nstructuredTypeMember = property / operation ; property, action, or function\n\nproperty             = annotations [propertyModifier RWS] identifier OWS ":" OWS typeReference\n\npropertyModifier     = %s"key"\n\ntypeReference        = typeName [ "?" ] / "[" typeName [ "?" ] "]"\n\ntypeName             = builtInType / edmType / qualifiedName\n\nbuiltInType          = %s"Boolean"\n                     / %s"DateTime"\n                     / %s"Date"\n                     / %s"Decimal" [ "(" precision "," scale ")"]\n                     / %s"Double"\n                     / %s"Duration"\n                     / %s"Integer"\n                     / %s"String" [ "(" maxLength ")" ]\n                     / %s"TimeOfDay"\n\nedmType              = %s"Edm" "." identifier\n\noperation            = annotations operationKind RWS identifier OWS\n                       "(" OWS [ parameter *( OWS "," OWS parameter) OWS ] ")"\n                       [ OWS ":" OWS annotations typeReference ]\n\noperationKind        = %s"action" / %s"function"\n\nparameter            = annotations identifier OWS ":" OWS typeReference\n')),(0,r.kt)("h3",{id:"enumeration-type"},"Enumeration Type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'enumType             = annotations ( %s"enum" / %s"flags" ) RWS identifier OWS "{" OWS 1*enumMember "}"\n\nenumMember           = annotations identifier OWS\n')),(0,r.kt)("h3",{id:"type-definition"},"Type Definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'typeDefinition       = annotations %s"typedef" RWS identifier OWS ":" OWS ( builtInType / edmType )\n')),(0,r.kt)("h3",{id:"service"},"Service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'service              = annotations %s"service" [ RWS identifier ] OWS "{" OWS serviceMember *( RWS serviceMember ) OWS "}"\n\nserviceMember        = annotations ( entitySet / singleton / serviceOperation )\n\nentitySet            = identifier OWS ":" OWS "[" qualifiedName "]"\n\nsingleton            = identifier OWS ":" OWS qualifiedName\n\nserviceOperation     = operationKind RWS identifier\n                       OWS "(" OWS [ parameter *(OWS "," OWS parameter) OWS ] ")"\n                       [ OWS ":" OWS annotations typeReference ]\n')),(0,r.kt)("h3",{id:"annotations"},"Annotations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'annotations          = *( annotation RWS )\n\nannotation           = "@" qualifiedName [ "#" identifier ] OWS ":" OWS annotationValue / DOC-COMMENT\n\nannotationValue      = %s"true"\n                     / %s"false"\n                     / %s"null"\n                     / number\n                     / DQUOTE *CHAR DQUOTE\n                     / "[" OWS [ annotationValue *( ( OWS "," OWS / RWS ) annotationValue ) OWS [ "," OWS ] ] "]"\n                     / "{" OWS [ annotationProperty *( ( OWS "," OWS /RWS ) annotationProperty ) OWS [ "," OWS ] ] "}"\n                     / "." *( "/"  identifier )\n\nannotationProperty   = propertyName OWS ":" OWS annotationValue\n\npropertyName         = identifier / DQUOTE 1*CHAR DQUOTE / "@" qualifiedName [ "#" identifier ]\n')),(0,r.kt)("h3",{id:"core-syntax-elements"},"Core Syntax Elements"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ABNF"},'qualifiedName       = identifier *( "." identifier )\n\nidentifier          = identInitial *identSubsequent\n\nidentInitial        = ALPHA / "_" ; Note: actually all Unicode letters\n\nidentSubsequent     = identInitial / DIGIT\n\nnumber              = integer [ "." 1*DIGIT ] [ "e" integer ]\n\ninteger             = [ "+" / "-" ] ( %x30 / %x31-39 *DIGIT )\n\nprecision           = integer\n\nscale               = integer\n\nmaxLength           = integer\n\nDOC-COMMENT         = "##" *( %x0-9 / %xB-C / %xE-10FFFF)\n\nALPHA               = %x41-5A / %x61-7A\n\nDIGIT               = %x30-39\n\nCHAR                = %x20-21 / %x23-5B / %x5D-10FFFF\n                    / ESCAPE ESCAPE\n                    / ESCAPE DQUOTE\n\nDQUOTE              = %x22              ; "\n\nESCAPE              = %x5C              ; \\\n\nOWS                 = *WS\nRWS                 = 1*WS\nWS                  = %x8 / %xA / %xD / %x20 ; TAB, LF, CR, SPACE\n')))}c.isMDXComponent=!0}}]);