// Generated from src/parsers/ODataUriQuery.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class ODataUriQueryLexer extends Lexer {
	public static readonly FILTER = 1;
	public static readonly SELECT = 2;
	public static readonly EXPAND = 3;
	public static readonly ORDERBY = 4;
	public static readonly TOP = 5;
	public static readonly SKIPKW = 6;
	public static readonly DESC = 7;
	public static readonly OR = 8;
	public static readonly AND = 9;
	public static readonly EQ = 10;
	public static readonly NEQ = 11;
	public static readonly GT = 12;
	public static readonly GTE = 13;
	public static readonly LT = 14;
	public static readonly LTE = 15;
	public static readonly AMP = 16;
	public static readonly ASSIGN = 17;
	public static readonly LPAREN = 18;
	public static readonly RPAREN = 19;
	public static readonly COMMA = 20;
	public static readonly NUMBER = 21;
	public static readonly WS = 22;
	public static readonly BOOLEAN = 23;
	public static readonly STRING = 24;
	public static readonly ID = 25;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"FILTER", "SELECT", "EXPAND", "ORDERBY", "TOP", "SKIPKW", "DESC", "OR", 
		"AND", "EQ", "NEQ", "GT", "GTE", "LT", "LTE", "AMP", "ASSIGN", "LPAREN", 
		"RPAREN", "COMMA", "NUMBER", "WS", "BOOLEAN", "STRING", "ID",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'$filter'", "'$select'", "'$expand'", "'$orderby'", "'$top'", 
		"'$skip'", "'desc'", "'or'", "'and'", "'eq'", "'ne'", "'gt'", "'ge'", 
		"'lt'", "'le'", "'&'", "'='", "'('", "')'", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "FILTER", "SELECT", "EXPAND", "ORDERBY", "TOP", "SKIPKW", "DESC", 
		"OR", "AND", "EQ", "NEQ", "GT", "GTE", "LT", "LTE", "AMP", "ASSIGN", "LPAREN", 
		"RPAREN", "COMMA", "NUMBER", "WS", "BOOLEAN", "STRING", "ID",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(ODataUriQueryLexer._LITERAL_NAMES, ODataUriQueryLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return ODataUriQueryLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(ODataUriQueryLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "ODataUriQuery.g4"; }

	// @Override
	public get ruleNames(): string[] { return ODataUriQueryLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return ODataUriQueryLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return ODataUriQueryLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return ODataUriQueryLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1B\xAD\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x03\x02\x03\x02\x03\x02" +
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07" +
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03" +
		"\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x06\x16\x8B\n\x16\r\x16\x0E" +
		"\x16\x8C\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\x9C\n\x18\x03\x19\x03" +
		"\x19\x07\x19\xA0\n\x19\f\x19\x0E\x19\xA3\v\x19\x03\x19\x03\x19\x03\x1A" +
		"\x03\x1A\x07\x1A\xA9\n\x1A\f\x1A\x0E\x1A\xAC\v\x1A\x03\xA1\x02\x02\x1B" +
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02" +
		"\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D" +
		"\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02" +
		"\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B\x03\x02\x06\x03\x022;\x03\x02" +
		"\"\"\x04\x02C\\c|\x06\x022;C\\aac|\x02\xB0\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x035\x03\x02\x02\x02\x05=\x03\x02" +
		"\x02\x02\x07E\x03\x02\x02\x02\tM\x03\x02\x02\x02\vV\x03\x02\x02\x02\r" +
		"[\x03\x02\x02\x02\x0Fa\x03\x02\x02\x02\x11f\x03\x02\x02\x02\x13i\x03\x02" +
		"\x02\x02\x15m\x03\x02\x02\x02\x17p\x03\x02\x02\x02\x19s\x03\x02\x02\x02" +
		"\x1Bv\x03\x02\x02\x02\x1Dy\x03\x02\x02\x02\x1F|\x03\x02\x02\x02!\x7F\x03" +
		"\x02\x02\x02#\x81\x03\x02\x02\x02%\x83\x03\x02\x02\x02\'\x85\x03\x02\x02" +
		"\x02)\x87\x03\x02\x02\x02+\x8A\x03\x02\x02\x02-\x8E\x03\x02\x02\x02/\x9B" +
		"\x03\x02\x02\x021\x9D\x03\x02\x02\x023\xA6\x03\x02\x02\x0256\x07&\x02" +
		"\x0267\x07h\x02\x0278\x07k\x02\x0289\x07n\x02\x029:\x07v\x02\x02:;\x07" +
		"g\x02\x02;<\x07t\x02\x02<\x04\x03\x02\x02\x02=>\x07&\x02\x02>?\x07u\x02" +
		"\x02?@\x07g\x02\x02@A\x07n\x02\x02AB\x07g\x02\x02BC\x07e\x02\x02CD\x07" +
		"v\x02\x02D\x06\x03\x02\x02\x02EF\x07&\x02\x02FG\x07g\x02\x02GH\x07z\x02" +
		"\x02HI\x07r\x02\x02IJ\x07c\x02\x02JK\x07p\x02\x02KL\x07f\x02\x02L\b\x03" +
		"\x02\x02\x02MN\x07&\x02\x02NO\x07q\x02\x02OP\x07t\x02\x02PQ\x07f\x02\x02" +
		"QR\x07g\x02\x02RS\x07t\x02\x02ST\x07d\x02\x02TU\x07{\x02\x02U\n\x03\x02" +
		"\x02\x02VW\x07&\x02\x02WX\x07v\x02\x02XY\x07q\x02\x02YZ\x07r\x02\x02Z" +
		"\f\x03\x02\x02\x02[\\\x07&\x02\x02\\]\x07u\x02\x02]^\x07m\x02\x02^_\x07" +
		"k\x02\x02_`\x07r\x02\x02`\x0E\x03\x02\x02\x02ab\x07f\x02\x02bc\x07g\x02" +
		"\x02cd\x07u\x02\x02de\x07e\x02\x02e\x10\x03\x02\x02\x02fg\x07q\x02\x02" +
		"gh\x07t\x02\x02h\x12\x03\x02\x02\x02ij\x07c\x02\x02jk\x07p\x02\x02kl\x07" +
		"f\x02\x02l\x14\x03\x02\x02\x02mn\x07g\x02\x02no\x07s\x02\x02o\x16\x03" +
		"\x02\x02\x02pq\x07p\x02\x02qr\x07g\x02\x02r\x18\x03\x02\x02\x02st\x07" +
		"i\x02\x02tu\x07v\x02\x02u\x1A\x03\x02\x02\x02vw\x07i\x02\x02wx\x07g\x02" +
		"\x02x\x1C\x03\x02\x02\x02yz\x07n\x02\x02z{\x07v\x02\x02{\x1E\x03\x02\x02" +
		"\x02|}\x07n\x02\x02}~\x07g\x02\x02~ \x03\x02\x02\x02\x7F\x80\x07(\x02" +
		"\x02\x80\"\x03\x02\x02\x02\x81\x82\x07?\x02\x02\x82$\x03\x02\x02\x02\x83" +
		"\x84\x07*\x02\x02\x84&\x03\x02\x02\x02\x85\x86\x07+\x02\x02\x86(\x03\x02" +
		"\x02\x02\x87\x88\x07.\x02\x02\x88*\x03\x02\x02\x02\x89\x8B\t\x02\x02\x02" +
		"\x8A\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02" +
		"\x8C\x8D\x03\x02\x02\x02\x8D,\x03\x02\x02\x02\x8E\x8F\t\x03\x02\x02\x8F" +
		"\x90\x03\x02\x02\x02\x90\x91\b\x17\x02\x02\x91.\x03\x02\x02\x02\x92\x93" +
		"\x07v\x02\x02\x93\x94\x07t\x02\x02\x94\x95\x07w\x02\x02\x95\x9C\x07g\x02" +
		"\x02\x96\x97\x07h\x02\x02\x97\x98\x07c\x02\x02\x98\x99\x07n\x02\x02\x99" +
		"\x9A\x07u\x02\x02\x9A\x9C\x07g\x02\x02\x9B\x92\x03\x02\x02\x02\x9B\x96" +
		"\x03\x02\x02\x02\x9C0\x03\x02\x02\x02\x9D\xA1\x07)\x02\x02\x9E\xA0\v\x02" +
		"\x02\x02\x9F\x9E\x03\x02\x02\x02\xA0\xA3\x03\x02\x02\x02\xA1\xA2\x03\x02" +
		"\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA4\x03\x02\x02\x02\xA3\xA1\x03\x02" +
		"\x02\x02\xA4\xA5\x07)\x02\x02\xA52\x03\x02\x02\x02\xA6\xAA\t\x04\x02\x02" +
		"\xA7\xA9\t\x05\x02\x02\xA8\xA7\x03\x02\x02\x02\xA9\xAC\x03\x02\x02\x02" +
		"\xAA\xA8\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB4\x03\x02\x02\x02" +
		"\xAC\xAA\x03\x02\x02\x02\x07\x02\x8C\x9B\xA1\xAA\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!ODataUriQueryLexer.__ATN) {
			ODataUriQueryLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(ODataUriQueryLexer._serializedATN));
		}

		return ODataUriQueryLexer.__ATN;
	}

}

