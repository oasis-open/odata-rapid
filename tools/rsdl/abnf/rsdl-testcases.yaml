# test cases for rsdl.abnf
- source: |
    namespace Jetsons
    include "core" as Core
    type Company
    {
        key stockSymbol: String
    }
    service {
        competitors: [Company]
    }
    paths {
      /competitors/{stockSymbol}
    }
  tokens:
    - namespace
    - Jetsons
    - include
    - Core
    - structuredType
    - Company
    - key
    - stockSymbol
    - String
    - service
    - entitySet
    - competitors
    - Company
    - competitors
    - stockSymbol

- source: "namespace foo\n" # whitespace required after namespace identifier
  tokens: [namespace, foo]

- source: |
    include "./foo" as foo
    include "../b\\a\"r.rsdl" as bar
  tokens: [include, foo, include, bar] # TODO: included filename as token? --> filename rule

- source: "type foo{bar:baz}"
  tokens: [structuredType, foo, bar, baz]

- source: |
    type foo {
      key bar : Integer
          baz : TimeOfDay
    }
  tokens: [structuredType, foo, key, bar, Integer, baz, TimeOfDay]

- source: |
    type foo {
      action a()
      function f(g:h) : TimeOfDay
    }
  tokens: [structuredType, foo, action, a, function, f, g, h, TimeOfDay]

- source: |
    enum color{red green blue}
    flags CRUD { C R  U   D }
  tokens: [enumType, color, red, green, blue, enumType, CRUD, C, R, U, D]

- source: "typedef foo:String(10)"
  tokens: [typeDefinition, foo, "String(10)"]

- source: "@a.b:0 typedef foo:Edm.Byte"
  tokens: [typeDefinition, "@a.b:0", foo, "Edm.Byte"]

- source: "service{foo:bar}"
  tokens: [service, singleton, foo, bar]

- source: "servicex{foo:bar}"
  failAt: 7 # whitespace required before service identifier

- source: "service x { foo : bar }"
  tokens: [service, x, singleton, foo, bar]

- source: |
    service {
      foo: bar
      baz: [qux]
    }
  tokens: [service, singleton, foo, bar, entitySet, baz, qux]

- source: |
    service {
      function f():Boolean
      action a()
      action b(c:Date):[String?]
    }
  tokens:
    [service, function, f, Boolean, action, a, action, b, c, Date, "[String?]"]

- source: |
    service {
      function f(g: DateTime): Decimal?
      action a( b :Decimal(5,2), d : Double ) : [Duration]
    }
  tokens:
    - service
    - function
    - f
    - g
    - DateTime
    - Decimal?
    - action
    - a
    - b
    - "Decimal(5,2)"
    - d
    - Double
    - "[Duration]"

- source: |
    @a.b#qualifier:7
    type foo {
      @x.y : { a : true b:false , "c":{}, @a.b#c :0, }
      key bar : Integer
          @e.f : [ null , [], ]
          baz : TimeOfDay
    }
  tokens:
    - structuredType
    - "@a.b#qualifier:7"
    - foo
    - '@x.y : { a : true b:false , "c":{}, @a.b#c :0, }'
    - key
    - bar
    - Integer
    - "@e.f : [ null , [], ]"
    - baz
    - TimeOfDay

- source: |
    @a.b:./c enum color{@a.b:0 red green @a.b:1 blue}
  tokens: [enumType, "@a.b:./c", color, "@a.b:0", red, green, "@a.b:1", blue]

- source: |
    @aa.bb.cc:42
    service {
      @a.b:""
      foo: bar
      @a.b:" "
      baz: [qux]
      @a.b:"\""
      function f( @b.c:0 g: DateTime ): @a.b:0 Decimal?
      @a.b:"\\"
      action a( b :Decimal(5,2), @b.c:-1.2e3 d : Double ) : [Duration]
    }
  tokens:
    - service
    - "@aa.bb.cc:42"
    - '@a.b:""'
    - singleton
    - foo
    - bar
    - '@a.b:" "'
    - entitySet
    - baz
    - qux
    - '@a.b:"\""'
    - function
    - f
    - "@b.c:0"
    - g
    - DateTime
    - "@a.b:0"
    - Decimal?
    - '@a.b:"\\"'
    - action
    - a
    - b
    - "Decimal(5,2)"
    - "@b.c:-1.2e3"
    - d
    - Double
    - "[Duration]"

- source: |
    @a.b:0
    type foo {
      @a.b:1
      key bar : Integer
          @a.b:2
          baz : TimeOfDay
      @a.b:3
      action a()
      @a.b:4
      function f(@a.b:5 g:h) : @a.b:6 TimeOfDay
    }
  tokens:
    - structuredType
    - "@a.b:0"
    - foo
    - "@a.b:1"
    - key
    - bar
    - Integer
    - "@a.b:2"
    - baz
    - TimeOfDay
    - "@a.b:3"
    - action
    - a
    - "@a.b:4"
    - function
    - f
    - "@a.b:5"
    - g
    - h
    - "@a.b:6"
    - TimeOfDay

- source: |
    ## The Employees Service
    ##
    ## Provides a list of all employees

    service {
      ## List of all employees
      employees: [Employee]
    }
  tokens:
    - service
    - "## The Employees Service"
    - "##"
    - "## Provides a list of all employees"
    - "## List of all employees"
    - entitySet
    - employees
    - Employee

- source: |
    service {
      company: Company { READ { expand { jetsons.company/employees } } }
    }
  tokens:
    - service
    - singleton
    - company
    - Company
    - jetsons
    - company
    - employees

- source: |
    service {
      competitors: [Company] {
        LIST { top, skip, count, filter, orderby, expand { employees { expand {*}, top, skip, count, filter}} }
        CREATE { expand{ employees { top, skip, count, filter, orderby, expand{ * } }, orders } }
        READ { expand{ } }
        UPDATE { expand }
        DELETE {}
      }
    }
  tokens:
    - service
    - entitySet
    - competitors
    - Company
    - employees
    - employees
    - orders

- source: |
    type Company
    {
      key stockSymbol: String { filterable { eq }, orderable }
      name: String { filterable { stringComp }, orderable {} }
      incorporated: Date { filterable, orderable { asc, desc } }
      employees: [Employee] { LIST { filter{name {stringComp}}, orderby{name{asc,desc}} }, READ }
    }
  tokens:
    - structuredType
    - Company
    - key
    - stockSymbol
    - String
    - name
    - String
    - incorporated
    - Date
    - employees
    - Employee
    - name
    - name

- source: |
    service {competitors: [Company] { DELETE } }
  failAt: 41 # braces required after DELETE

- source: |
    paths {
      /competitors
      /competitors/{stockSymbol}
      /competitors/{stockSymbol}/employees
      /competitors/{stockSymbol}/employees/{id}
    }

- source: |
    paths {
      /company
      /company/employees
      /company/employees/{id}
      /company/youreFired
    }

- source: |
    paths {
      /company
      /company/employees
      /company/employees/{id}
      /competitors
      /competitors/{stockSymbol}
      /competitors/{stockSymbol}/employees
      /competitors/{stockSymbol}/employees/{id}
      /company/topEmployees(num={num})
      /company/topEmployees(num={num})/{id}
      /company/youreFired
    }

- source: |
    paths
    {
      /company/topEmployees(num={num})
      /company/topEmployees(num={num},num2={num2})
      /company/topEmployees(num={num})/{id}
      /company/topEmployees(num={num},num2={num2})/{id}
    }

- source: |
    paths
    {
      /topEmployees(num={num})
      /topEmployees(num={num},num2={num2})
      /topEmployees(num={num})/{id}
      /topEmployees(num={num},num2={num2})/{id}
    }

- source: |
    paths {
      /company/employees { GET }
    }

- source: |
    paths {
      /company/employees { GET {} }
    }

- source: |
    paths {
      /company/employees { GET { orderby{name {asc, desc}} } }
    }

- source: |
    paths {
      /company/employees { GET { top skip count } }
    }

- source: |
    paths {
      /company/employees { GET { filter{name {stringComp}} } }
    }

- source: |
    paths {
      /company/employees { GET { expand{ employees { top, skip, count, filter, orderby } } } }
    }

- source: |
    paths {
      /company/employees { GET { orderby top skip count filter expand } }
    }

- source: |
    paths {
      /company/employees { GET { orderby{name} filter{name} expand{ employees } } }
    }

- source: |
    paths {
      /company/employees { GET { orderby{name {asc, desc}} top skip count filter{name {stringComp}} expand{ employees { top, skip, count, filter, orderby } } } }
    }

- source: |
    paths {
      /company/employees { GET { orderby{*} filter{*} } }
    }

- source: |
    paths {
      /company/employees { POST }
    }

- source: |
    paths {
      /company/employees { GET }
    }

- source: |
    paths {
      /company/employees { PATCH }
    }

- source: |
    paths {
      /company/employees { PUT }
    }

- source: |
    paths {
      /company/employees { DELETE }
    }

- source: |
    paths {
      /company/employees/{id} { GET { expand{ employees { top, skip, count, filter, orderby } } } }
    }

- source: |
    paths {
      /company/employees/{id} { GET { orderby{name {asc, desc}} top skip count filter{name {stringComp}} expand{ employees { top, skip, count, filter, orderby } } } }
    }
  failAt: 42 # collection valued capabilities not supported for a single valued collection
